#include<bits/stdc++.h>
#include <chrono>
using namespace std;
//Binary SubArray Sum
//Brute Force
void NoOfSubArray(vector<int>v,int k) {
    int n=v.size();
    int cnt=0;

    for(int i=0; i<n; i++) {
        int sum=0;
        for(int j=i; j<n; j++) {
            sum+=v[j];
            if(sum==k) {
                cnt++;
            }
            else if(sum>k) {
                break;
            }
        }
    }
    cout<<cnt<<endl;
}
//TC: O(n^2)

//Batter & optimal
// this code is for sum<=k .. we do (<=k - (<+(k-1)) that is ==k)
int  NoOfSubArray2(vector<int>v,int k) {
    int n=v.size();
    if(k<0) {
        return 0;
    }
    int cnt=0;
    int l,r;
    l=r=0;
    int sum=0;
    while(r<n) {
        sum+=v[r];

        while(sum>k) {
            sum-=v[l];
            l++;
        }
        cnt+=(r+1-l);



        r++;
    }

    return cnt;
}


int main() {
    auto start=
        chrono::high_resolution_clock::now();
    vector<int>v= {0,0,0,0,0};
    int k=0;
   // NoOfSubArray(v,k);
    cout<<NoOfSubArray2(v,k)-NoOfSubArray2(v,k-1);



    auto end = chrono::high_resolution_clock::now();
    chrono::duration<double,milli> duration = end - start;

    // Output the duration
    cout << "\nTime taken: " << duration.count() << "seconds" << endl;

    return 0;
}
    
